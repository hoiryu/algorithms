/**
 * DFS
 * 미로탐색
 * 7*7 격자판 미로를 탈출하는 경로의 가지수를 출력하는 프로그램을 작성하세요. 출발점은 격
 * 자의 (1, 1) 좌표이고, 탈출 도착점은 (7, 7)좌표이다. 격자판의 1은 벽이고, 0은 통로이다. 격
 * 자판의 움직임은 상하좌우로만 움직인다. 미로가 다음과 같다면
 * S 0 0 0 0 0 0
 * 0 1 1 1 1 1 0
 * 0 0 0 1 0 0 0
 * 1 1 0 1 0 1 1
 * 1 1 0 0 0 0 1
 * 1 1 0 1 1 0 0
 * 1 0 0 0 0 0 E
 * 위의 지도에서 출발점에서 도착점까지 갈 수 있는 방법의 수는 8가지이다.
 * ▣ 입력설명
 * 7*7 격자판의 정보가 주어집니다.
 * ▣ 출력설명
 * 첫 번째 줄에 경로의 가지수를 출력한다.
 * ▣ 입력예제 1
 * [
 * 	[0, 0, 0, 0, 0, 0, 0],
 * 	[0, 1, 1, 1, 1, 1, 0],
 * 	[0, 0, 0, 1, 0, 0, 0],
 * 	[1, 1, 0, 1, 0, 1, 1],
 * 	[1, 1, 0, 0, 0, 0, 1],
 * 	[1, 1, 0, 1, 1, 0, 0],
 * 	[1, 0, 0, 0, 0, 0, 0]
 * ]
 * ▣ 출력예제 1
 * 8
 */
export default function solution(arr) {
	let answer = 0;
	const n = arr.length;
	const dx = [-1, 0, 1, 0];
	const dy = [0, 1, 0, -1];

	function dfs(x, y) {
		if (x === n - 1 && y === n - 1) return answer++;

		for (let i = 0; i < dx.length; i++) {
			const cx = x + dx[i];
			const cy = y + dy[i];
			if (cx < 0 || cy < 0 || cx > n - 1 || cy > n - 1 || arr[cx][cy] === 1) continue;

			arr[cx][cy] = 1;
			dfs(cx, cy);
			arr[cx][cy] = 0;
		}
	}

	arr[0][0] = 1;
	dfs(0, 0);

	return answer;
}
